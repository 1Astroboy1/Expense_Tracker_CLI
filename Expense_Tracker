import json
from collections import defaultdict
from datetime import datetime

class ExpenseTracker:
    def __init__(self):
        self.expenses = []

    def add_expense(self, description: str, amount: float):
        entry = {
            "description": description,
            "amount": amount,
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        self.expenses.append(entry)

    def view_expenses(self):
        expenses = self.expense
        summary = defaultdict(float)
        total = 0.0
        
        print("== Expense List ==")
        for exp in expenses:
            print(f"{exp['timestamp']} - {exp['description']}: {exp['amount']} THB")

        print("== Total Expense ==")
        for exp in expenses:
            print(f"{exp['date']} - {exp['category']}: {exp['amount']} THB")
            total += exp['amount']

        print(f"\nTotal Expense : {total:.2f} THB")
    
    def summary_by_week(self):
        expenses = self.expense
        weekly_summary = defaultdict(float)
    
        for exp in expenses:
            date_obj = datetime.strptime(expense["date"], "%Y-%m-%d")
            year, week, _ = date_obj.isocalendar()
            weekly_summary[(year, week)] += expense["amount"]

        print("== Weekly Summary ==")

        for (year, week), total in sorted(weekly_summary.items()):
            start_date = datetime.strptime(f"{year}-W{week}-1", "%G-W%V-%u")
            end_date = start_date.replace(day=start_date.day + 6)
            print(f"Week {week} ({start_date.strftime('%b %d')}–{end_date.strftime('%b %d')}): {total:.2f} THB")    

    def save_to_file(self, filename):
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(self.expenses, f, indent=4, ensure_ascii=False)

    def load_from_file(self, filename):
        try:
            with open(filename, "r", encoding="utf-8") as f:
                self.expenses = json.load(f)
        except FileNotFoundError:
            print("File not found. Starting with an empty expense list.")
            self.expenses = []
            
def main():
    tracker = ExpenseTracker()

    while True:
        print("\n Expense Tracker Menu")
        print("1. Add new expense")
        print("2. View all expenses")
        print("3. Save expenses to file")
        print("4. Load expenses from file")
        print("5 Expenses by week")
        print("6. Exit")

        choice = input("Choose an option (1–5): ")

        if choice == "1":
            desc = input("Description: ")
            try:
                amount = float(input("Amount (THB): "))
                tracker.add_expense(desc, amount)
                print("Expense added!")
            except ValueError:
                print("Invalid amount. Please enter a number.")
                
        elif choice == "2":
            tracker.view_expenses()
            
        elif choice == "3":
            filename = input("Enter filename to save (e.g., expenses.json): ")
            tracker.save_to_file(filename)
            
        elif choice == "4":
            filename = input("Enter filename to load: ")
            tracker.load_from_file(filename)

        elif choice == "5":
            week = input("Please enter week :")
            summary_by_week(week)
            
        elif choice == "6":
            print("Goodbye!")
            break
        else:
            print("Invalid option. Please choose 1–5.")

if __name__ == "__main__":
    main()
